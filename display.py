from datetime import datetime
import json
import board
import neopixel


#beispiel = [[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[228,26,74],[0,0,0],[0,0,0],[228,26,74],[0,0,0],[0,0,0],[0,0,0],[67,183,110],[67,183,110],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[18,104,129],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[114,29,71],[114,29,71],[0,0,0],[0,0,0]],[[0,0,0],[228,26,74],[0,0,0],[228,26,74],[228,26,74],[0,0,0],[0,0,0],[0,0,0],[67,183,110],[0,0,0],[67,183,110],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[18,104,129],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0]],[[0,0,0],[228,26,74],[228,26,74],[228,26,74],[228,26,74],[0,0,0],[0,0,0],[0,0,0],[67,183,110],[0,0,0],[0,0,0],[67,183,110],[0,0,0],[0,0,0],[0,0,0],[18,104,129],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[243,117,33],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0]],[[0,0,0],[228,26,74],[0,0,0],[0,0,0],[228,26,74],[0,0,0],[0,0,0],[67,183,110],[67,183,110],[67,183,110],[67,183,110],[67,183,110],[0,0,0],[0,0,0],[0,0,0],[18,104,129],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[243,117,33],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0]],[[0,0,0],[228,26,74],[0,0,0],[0,0,0],[228,26,74],[0,0,0],[0,0,0],[67,183,110],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[67,183,110],[0,0,0],[0,0,0],[18,104,129],[18,104,129],[18,104,129],[18,104,129],[0,0,0],[243,117,33],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[114,29,71],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[243,117,33],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[114,29,71],[0,0,0],[0,0,0],[114,29,71],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[243,117,33],[243,117,33],[243,117,33],[243,117,33],[243,117,33],[0,0,0],[0,0,0],[114,29,71],[114,29,71],[0,0,0],[0,0,0],[0,0,0]]]

# function to render display
def render_display(matrix, clock, brightness):
    #print("Matrix", matrix)
    #print(clock)
    matrix_string = []
    
    if clock == True:
        current_time = datetime.now().strftime("%H%M")
        
        v1, v2, v4, v5 = current_time
        
        #load .json font required to display time
        first = f"fonts/{v1}.json"
        second = f"fonts/{v2}.json"
        colon = "fonts/colon.json"
        third = f"fonts/{v4}.json"
        fourth = f"fonts/{v5}.json"

        with open(first, 'r') as file:
                first = json.load(file)
        with open(second, 'r') as file:
                second = json.load(file)
        with open(colon, 'r') as file:
                colon = json.load(file)
        with open(third, 'r') as file:
                third = json.load(file)
        with open(fourth, 'r') as file:
                fourth = json.load(file)

        #overwrite pixel meant to display the clock
        for i in range (1, 7):      
            for j in range (4, 9):
                (matrix[i])[j] = (first[i])[(j-4)]     
            for j in range (9, 14):
                (matrix[i])[j] = (second[i])[(j-9)]     
            for j in range (14, 17):
                (matrix[i])[j] = (colon[i])[(j-14)]     
            for j in range (17, 22):
                (matrix[i])[j] = (third[i])[(j-17)]     
            for j in range (22, 27):
                (matrix[i])[j] = (fourth[i])[(j-22)]     
    
    #print("hallo", matrix)

    #render matrix into serpentine strip for neopixel display
    for k in range(0, 32):    
        if k%2==0:
            for i in range(0, 8):
                submatrix = matrix[i]
                matrix_string.append(submatrix[k])
        else:
            for i in range (7, -1, -1):
                submatrix = matrix[i]
                matrix_string.append(submatrix[k])  
    
    sent_display(matrix_string, brightness)
    return


#print(render_display(beispiel, True, 100))

#Drive neopixel display

#test=[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [228, 26, 74], [228, 26, 74], [228, 26, 74], [228, 26, 74], [228, 26, 74], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [228, 26, 74], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [228, 26, 74], [228, 26, 74], [0, 0, 0], [0, 0, 0], [0, 0, 0], [228, 26, 74], [228, 26, 74], [228, 26, 74], [228, 26, 74], [228, 26, 74], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [67, 183, 110], [67, 183, 110], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [67, 183, 110], [67, 183, 110], [67, 183, 110], [67, 183, 110], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [67, 183, 110], [0, 0, 0], [0, 0, 0], [67, 183, 110], [0, 0, 0], [0, 0, 0], [0, 0, 0], [67, 183, 110], [0, 0, 0], [67, 183, 110], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [67, 183, 110], [67, 183, 110], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [67, 183, 110], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [18, 104, 129], [18, 104, 129], [18, 104, 129], [18, 104, 129], [18, 104, 129], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [18, 104, 129], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [18, 104, 129], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [18, 104, 129], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [243, 117, 33], [243, 117, 33], [243, 117, 33], [243, 117, 33], [243, 117, 33], [243, 117, 33], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [243, 117, 33], [243, 117, 33], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [243, 117, 33], [0, 0, 0], [0, 0, 0], [114, 29, 71], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [114, 29, 71], [114, 29, 71], [114, 29, 71], [114, 29, 71], [114, 29, 71], [0, 0, 0], [114, 29, 71], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [114, 29, 71], [0, 0, 0], [0, 0, 0], [114, 29, 71], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [114, 29, 71], [0, 0, 0], [114, 29, 71], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [114, 29, 71], [0, 0, 0], [0, 0, 0], [0, 0, 0], [114, 29, 71], [114, 29, 71], [114, 29, 71], [114, 29, 71], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]

def sent_display(matrix, brightness):
    #setup
    pixel_pin = board.D18
    num_pixels = 256
    ORDER = neopixel.GRB
    pixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness, auto_write=False, pixel_order=ORDER)
    #set color for each pixel
    for i in range (num_pixels):
         pixels[i]=matrix[i]
    #show pixels
    pixels.show()

#sent_display(test, 100)
